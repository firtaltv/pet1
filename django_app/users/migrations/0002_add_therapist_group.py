# Generated by Django 4.0.3 on 2022-09-15 13:19

from django.db import migrations


def add_permissions(apps, schema_editor):
    """
    Add permissions for Slot, Schedule, Massage models.
    :param apps:
    :param schema_editor:
    :return:
    """
    permission = apps.get_model("auth", "Permission")
    content_type = apps.get_model("contenttypes", "ContentType")

    slot_def = apps.get_model("service", "Slot")
    schedule_def = apps.get_model("service", "Schedule")
    massage_def = apps.get_model("service", "Massage")

    # Content type objects
    slot_def_content_type = content_type.objects.get_for_model(slot_def)
    schedule_def_content_type = content_type.objects.get_for_model(schedule_def)
    massage_def_content_type = content_type.objects.get_for_model(massage_def)

    db_alias = schema_editor.connection.alias

    permissions_data = [
        {"codename": "add_slot", "name": "Can add Slot", "content_type": slot_def_content_type},
        {"codename": "change_slot", "name": "Can change Slot", "content_type": slot_def_content_type},
        {"codename": "delete_slot", "name": "Can delete Slot", "content_type": slot_def_content_type},
        {"codename": "view_slot", "name": "Can view Slot", "content_type": slot_def_content_type},

        {"codename": "add_schedule", "name": "Can add Schedule", "content_type": schedule_def_content_type},

        {"codename": "add_massage", "name": "Can add Massage", "content_type": massage_def_content_type},
        {"codename": "change_massage", "name": "Can change Massage", "content_type": massage_def_content_type},
        {"codename": "delete_massage", "name": "Can delete Massage", "content_type": massage_def_content_type},
        {"codename": "view_massage", "name": "Can view Massage", "content_type": massage_def_content_type},
    ]

    permission_list = []
    for permission_data in permissions_data:
        if not permission.objects.filter(codename=permission_data["codename"]).exists():
            permission_list.append(permission(codename=permission_data["codename"], name=permission_data["name"],
                                              content_type=permission_data["content_type"]))
    permission.objects.using(db_alias).bulk_create(permission_list)


def add_groups(apps, schema_editor):
    """
    Add 'Therapist' group.
    'Therapist' has next permissions:
    - Slot - Can add/change/delete/view permission
    - Schedule - Can add permission
    - Massage - Can add/change/delete/view permission
    :param apps:
    :param schema_editor:
    :return:
    """
    group = apps.get_model("auth", "Group")
    permission = apps.get_model("auth", "Permission")

    db_alias = schema_editor.connection.alias

    # Adding 'Therapist' group
    permissions_code_names = ["add_slot", "change_slot", "delete_slot", "view_slot", "add_schedule", "view_massage"]
    therapist_permissions = permission.objects.using(db_alias).filter(codename__in=permissions_code_names)
    therapist_group, created = group.objects.get_or_create(name="Therapist")
    therapist_group.permissions.set(therapist_permissions)


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_permissions),
        migrations.RunPython(add_groups)
    ]
